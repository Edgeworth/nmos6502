#include "nmos6502/disassemble.hpp"
#include "boost/format.hpp"

static struct InstructionFormat {
	const char* fmt;
	int size;
} fmt_opcodes[256] = {
	{"brk", 1},
	{"ora ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"ora $%x", 2},
	{"asl $%x", 2},
	{NULL, 0},
	{"php", 1},
	{"ora #$%x", 2},
	{"asl A", 1},
	{NULL, 0},
	{NULL, 0},
	{"ora $%x", 3},
	{"asl $%x", 3},
	{NULL, 0},
	{"bpl *+$%x", 2},
	{"ora ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"ora $%x,X", 2},
	{"asl $%x,X", 2},
	{NULL, 0},
	{"clc", 1},
	{"ora $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"ora $%x,X", 3},
	{"asl $%x,X", 3},
	{NULL, 0},
	{"jsr $%x", 3},
	{"and ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{"bit $%x", 2},
	{"and $%x", 2},
	{"rol $%x", 2},
	{NULL, 0},
	{"plp", 1},
	{"and #$%x", 2},
	{"rol A", 1},
	{NULL, 0},
	{"bit $%x", 3},
	{"and $%x", 3},
	{"rol $%x", 3},
	{NULL, 0},
	{"bmi *+$%x", 2},
	{"and ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"and $%x,X", 2},
	{"rol $%x,X", 2},
	{NULL, 0},
	{"sec", 1},
	{"and $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"and $%x,X", 3},
	{"rol $%x,X", 3},
	{NULL, 0},
	{"rti", 1},
	{"eor ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"eor $%x", 2},
	{"lsr $%x", 2},
	{NULL, 0},
	{"pha", 1},
	{"eor #$%x", 2},
	{"lsr A", 1},
	{NULL, 0},
	{"jmp $%x", 3},
	{"eor $%x", 3},
	{"lsr $%x", 3},
	{NULL, 0},
	{"bvc *+$%x", 2},
	{"eor ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"eor $%x,X", 2},
	{"lsr $%x,X", 2},
	{NULL, 0},
	{"cli", 1},
	{"eor $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"eor $%x,X", 3},
	{"lsr $%x,X", 3},
	{NULL, 0},
	{"rts", 1},
	{"adc ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"adc $%x", 2},
	{"ror $%x", 2},
	{NULL, 0},
	{"pla", 1},
	{"adc #$%x", 2},
	{"ror A", 1},
	{NULL, 0},
	{"jmp ($%x)", 3},
	{"adc $%x", 3},
	{"ror $%x", 3},
	{NULL, 0},
	{"bvs *+$%x", 2},
	{"adc ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"adc $%x,X", 2},
	{"ror $%x,X", 2},
	{NULL, 0},
	{"sei", 1},
	{"adc $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"adc $%x,X", 3},
	{"ror $%x,X", 3},
	{NULL, 0},
	{NULL, 0},
	{"sta ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{"sty $%x", 2},
	{"sta $%x", 2},
	{"stx $%x", 2},
	{NULL, 0},
	{"dey", 1},
	{NULL, 0},
	{"txa", 1},
	{NULL, 0},
	{"sty $%x", 3},
	{"sta $%x", 3},
	{"stx $%x", 3},
	{NULL, 0},
	{"bcc *+$%x", 2},
	{"sta ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{"sty $%x,X", 2},
	{"sta $%x,X", 2},
	{"stx $%x,Y", 2},
	{NULL, 0},
	{"tya", 1},
	{"sta $%x,Y", 3},
	{"txs", 1},
	{NULL, 0},
	{NULL, 0},
	{"sta $%x,X", 3},
	{NULL, 0},
	{NULL, 0},
	{"ldy #$%x", 2},
	{"lda ($%x,X)", 2},
	{"ldx #$%x", 2},
	{NULL, 0},
	{"ldy $%x", 2},
	{"lda $%x", 2},
	{"ldx $%x", 2},
	{NULL, 0},
	{"tay", 1},
	{"lda #$%x", 2},
	{"tax", 1},
	{NULL, 0},
	{"ldy $%x", 3},
	{"lda $%x", 3},
	{"ldx $%x", 3},
	{NULL, 0},
	{"bcs *+$%x", 2},
	{"lda ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{"ldy $%x,X", 2},
	{"lda $%x,X", 2},
	{"ldx $%x,Y", 2},
	{NULL, 0},
	{"clv", 1},
	{"lda $%x,Y", 3},
	{"tsx", 1},
	{NULL, 0},
	{"ldy $%x,X", 3},
	{"lda $%x,X", 3},
	{"ldx $%x,Y", 3},
	{NULL, 0},
	{"cpy #$%x", 2},
	{"cmp ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{"cpy $%x", 2},
	{"cmp $%x", 2},
	{"dec $%x", 2},
	{NULL, 0},
	{"iny", 1},
	{"cmp #$%x", 2},
	{"dex", 1},
	{NULL, 0},
	{"cpy $%x", 3},
	{"cmp $%x", 3},
	{"dec $%x", 3},
	{NULL, 0},
	{"bne *+$%x", 2},
	{"cmp ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"cmp $%x,X", 2},
	{"dec $%x,X", 2},
	{NULL, 0},
	{"cld", 1},
	{"cmp $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"cmp $%x,X", 3},
	{"dec $%x,X", 3},
	{NULL, 0},
	{"cpx #$%x", 2},
	{"sbc ($%x,X)", 2},
	{NULL, 0},
	{NULL, 0},
	{"cpx $%x", 2},
	{"sbc $%x", 2},
	{"inc $%x", 2},
	{NULL, 0},
	{"inx", 1},
	{"sbc #$%x", 2},
	{"nop", 1},
	{NULL, 0},
	{"cpx $%x", 3},
	{"sbc $%x", 3},
	{"inc $%x", 3},
	{NULL, 0},
	{"beq *+$%x", 2},
	{"sbc ($%x),Y", 2},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"sbc $%x,X", 2},
	{"inc $%x,X", 2},
	{NULL, 0},
	{"sed", 1},
	{"sbc $%x,Y", 3},
	{NULL, 0},
	{NULL, 0},
	{NULL, 0},
	{"sbc $%x,X", 3},
	{"inc $%x,X", 3},
	{NULL, 0}
};
#include <cstdio>

namespace nmos6502 {

	std::string disassemble(uint8* data) {
		InstructionFormat fmt = fmt_opcodes[data[0]];
		if (fmt.fmt == NULL)
			return "Unknown opcode";

		if (fmt.size == 1)
			return fmt.fmt;
		else if (fmt.size == 2)
			return (boost::format(fmt.fmt)%uint16(data[1])).str();
		else
			return (boost::format(fmt.fmt)%(join(data[1], data[2]))).str();
	}

}
